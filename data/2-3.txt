
1

; =============== Problem 3 可見數據 ====================
(define a "=============== Problem 3 viewable case =================")
a

(clean-environment)

; 9. Conditionals

(if (> 3 2) 'good 'bad)
(if (> 3 2) 'good)
(define a 5)
(if a 'good 'bad)
(if (not a) 'good 'bad)
(define a nil)
(if a '(1 2) '(3 4))
(if (not a) '((1 (2) 1) 1) '((3) (4 3)))
(if (not a) '((1 (2) 1) 1) )
(if 1 2 3)
(if (cons 1 2) 3 4)
(if nil 3 4)
(if #t 3 4)

(define b 4)
(cond ((> 3 b) 'bad)
      ((> b 3) 'good)
      (else "What happened?") ; note that 'else' is a keyword in OurScheme ; 
)                             ; however, it is not a primitive
(define else #t) ; a non-primitive symbol can always have a binding
(cond ((> 3 b) 'bad)
      (else 'good)            ; this 'else' is a "normal" symbol
      ((> b 3) 'ok)
)
(define else #f)
(cond ((> 3 b) 'bad)
      (else 'good)            
      ((> b 3) 'ok)
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (else "What happened?") ; only when being here is 'else' a keyword
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (#t "What happened?")   ; can also use #t to mean "in all other cases"
)
(cond (#t 3))
(cond ((> 3 4) 'bad)
      ((> 4 3) 'good)
)
(cond ('(3 4) 'bad)
      ((> 4 3) 'good)
)
(cond (5 'bad)
      ((> 4 3) 'good)
)
  
; more 搞怪examples

(define a 10)
(define b 20)

(cond ((> a b) 3)
      (#f 4)
      (else 5)
) ; should get 5

(define else '(1 2))

else ; should get >>(1 2)<<

(cond ((> b 100) 3)
      (else 4)
      (else 5)
) ; should get 4

(cond ((> a 100) 3)
      ((not else) 4)
      (else else)
) ; should get >>(1 2)<<

(define else #f)

(cond ((> a b) 1)
      (else 2)
      (else else)
) ; should get nil