1

; =============== Problem 4 可見數據 ====================
(define a "=============== Problem 4 viewable case =================")
a

(clean-environment)

(begin 3)
(begin 3 4 5)

(begin 
   (car '(1 2 3))
   (cdr '(1 2 3))
)

(begin
   (list '(1 2 3))
)

(define a 5)

( and        ; 'and' either returns the evaluated result of
  (pair? 3)  ; the first one that is evaluated to nil
  a          ; or the evaluated result of the last one
)                          

( and #t a )

( or         ; 'or' either returns the evaluated result of
  a          ; the first one that is not evaluated to nil
  (null? ()) ; or the evaluated result of the last one
)

; ------- functional compositions (same category) -------

(define hello "\"CYCU ICE\"")
(define there "Number One!")
(cons (car (list hello there)) there)

(define a '(30 40))
(cons 5 a)
a
(define a (cons 3 a))
(cons (cons 5 a) a)
a
(car (car (cons a a)))
(cdr (list a a (car (car (cons a a)))))
(define a (cdr (list a a (car (car (cons a a)))))
)
(car (cdr a))
(cons (car (cdr (cdr (car a))))
      (cdr a)
)
(define a
 (list (car (cdr a))
       (cons (car (cdr (cdr (car a))))
             (cdr a)
       )
       (car (cdr a))
 )
)
a
(define b a)
(define b (cons (list a b) a))
b
(cons (car b) (car (cdr b)))

; ------- functional compositions (same category) -------

(define a 5)
(define b 10)
(define c 20)
(define list1 '(11 22 33))
(define list2 '(12 23 34))
(define str1 "abc")
(define str2 (string-append "d" "de"))
(define var1
 (- ( + (- a b) (* c a 3) 
    )
    (* a (+ b c (car list1)))
    (car (cdr list2))
 )
)
(>= var1 (car (cdr (cdr list2))))
(string>? (string-append "Hello" str1)
          str2
)
(not (> a 3))
; etc.

; ------- functional compositions (different categories) -------

(cons
  (cons (+ 30 50)
        (cdr '(The sun shines bright))
  )
  (list (null? '())
        (pair? '(30 (40)))
        (- (+ 5 7) (+ 2 3))
        '(1 2 . (3))
  )
)
(if (> a b)
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)
(if (not (> a b))
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)

(define d 20)
(begin
   3 4 d)
(begin
   (+ 3 5)
   (- 4 5)
   (* d d)
)
(define a 20)
(define b 40)
(list
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )

          ( begin
            (- b (+ a a))
            (> 70 b)
          )
)
(if #t (begin 3 4 5))
(cond ((> 5 3) 'good 'better 'best) (#t 'OK?)   )
(define a (+ a b a))

(cond ( (> a b) (+ a b) (- a b) (* a b) ) 
      (  else 'OK? )   
)

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  else
         ( list 'OK? 'Correct? )
         ( cons 'OK? 'Correct? ) 
      )   
)

<<